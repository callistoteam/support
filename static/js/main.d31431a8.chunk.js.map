{"version":3,"sources":["serviceWorker.js","config.js","functions/editRef.js","functions/rawRef.js","components/Content.js","sfe/index.js","sfe/__bodyStyle.js","sfe/desktopOnly.js","sfe/displayHeader.js","components/Header.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","author","name","branch","config","Content","props","useState","isLoading","setLoading","pageData","setPageData","params","useParams","batchURI","page","useEffect","fetch","rawRef","then","buffer","text","markdown","className","markup","src","style","width","href","editRef","__bodyStyle","css","minHeight","desktopOnly","display","displayHeader","background","Header","sfe","to","App","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CClBS,G,MACD,CACVC,OAAQ,YACRC,KAAM,UACNC,OAAQ,SCFE,+BAAuBC,EAAkBH,OAAvD,YAAiEG,EAAkBF,KAAnF,iBAAgGE,EAAkBD,QCApG,8CAAsCC,EAAkBH,OAAtE,YAAgFG,EAAkBF,KAAlG,YAA0GE,EAAkBD,QCmF7GE,EA5EC,SAAAC,GAAU,IAAD,EACSC,oBAAS,GADlB,mBAChBC,EADgB,KACLC,EADK,OAESF,mBAAS,IAFlB,mBAEhBG,EAFgB,KAENC,EAFM,KAGjBC,EAASC,cACTC,EAAW,KAAOF,EAAOG,MAAQ,SAAW,MAWlD,OATAC,qBAAU,WACRC,YAAMC,EAASJ,GACZK,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACJX,EAAYW,GACZb,GAAW,QAEd,CAACG,EAAOG,OAEPP,EACK,KAIP,yBAAKe,UAAU,gBACb,yBAAKA,UAAU,oBACb,kBAAC,WAAD,CAAUC,OAAQd,KAGL,cAAbI,EACE,yBAAKS,UAAU,2CACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,uBACb,uBAAGA,UAAU,2BACb,wBAAIA,UAAU,aAAd,4BAGA,yBAAKA,UAAU,cAAf,8HAIJ,yBAAKA,UAAU,UACb,yBAAKA,UAAU,uBACb,yBAAKE,IAAI,kBAAkBC,MAAO,CAAEC,MAAO,aAC3C,wBAAIJ,UAAU,aAAd,sBAGA,yBAAKA,UAAU,cAAf,2HAMN,6BACE,yBAAKA,UAAU,eACf,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,aAAf,0EACA,4BAAQA,UAAU,4BAA2B,uBAAGA,UAAU,qBAA1D,UACA,4BAAQA,UAAU,0BAAyB,uBAAGA,UAAU,mBAAxD,wBAKR,yBAAKA,UAAU,eACf,yBAAKA,UAAU,mCACb,wBAAIA,UAAU,aAAd,mGACA,uBAAGA,UAAU,4BAA4BK,KAAMC,EAAUf,GAAzD,2DAEE,uBAAGS,UAAU,uBAGjB,yBAAKA,UAAU,oBACb,gF,OCzEO,GACbO,YCHaC,cAAI,CAEjBC,UAAW,UDEXC,YEJaF,cAAI,CACjB,2BAA4B,CAC1BG,QAAS,UFGXC,cGLaJ,cAAI,CACjBK,WAAY,WCkCCC,EAhCA,SAAA/B,GACb,OACE,oCACE,wBAASgC,EAAIH,cACX,yBAAKZ,UAAU,gBACb,yBAAKA,UAAU,uCACb,kBAAC,IAAD,CAAMgB,GAAG,KACP,uBAAGhB,UAAU,eAAb,gCAKF,uBAAGA,UAAU,OAAOK,KAAK,8BACvB,uBAAGL,UAAU,iBACb,yBAAUe,EAAIL,YAAd,6BAGF,yBAAKV,UAAU,cACb,kBAAC,IAAD,CAAMgB,GAAG,eACP,uBAAGhB,UAAU,QACX,uBAAGA,UAAU,cACb,yBAAUe,EAAIL,YAAd,oCCCHO,EAnBH,SAAAlC,GACV,OACE,wBAASgC,EAAIR,YACX,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,W,OCVZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SX0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d31431a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default {\r\n  repository: {\r\n    author: 'Seia-Soto',\r\n    name: 'support',\r\n    branch: 'docs'\r\n  }\r\n}\r\n","import config from '../config'\r\n\r\nexport default `https://github.com/${config.repository.author}/${config.repository.name}/edit/${config.repository.branch}`\r\n","import config from '../config'\r\n\r\nexport default `https://raw.githubusercontent.com/${config.repository.author}/${config.repository.name}/${config.repository.branch}`\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Markdown } from 'react-showdown'\r\nimport fetch from 'unfetch'\r\nimport './Content.css'\r\n\r\nimport editRef from '../functions/editRef'\r\nimport rawRef from '../functions/rawRef'\r\n\r\nconst Content = props => {\r\n  const [isLoading, setLoading] = useState(true)\r\n  const [pageData, setPageData] = useState('')\r\n  const params = useParams()\r\n  const batchURI = '/' + (params.page || 'index') + '.md'\r\n\r\n  useEffect(() => {\r\n    fetch(rawRef + batchURI)\r\n      .then(buffer => buffer.text())\r\n      .then(markdown => {\r\n        setPageData(markdown)\r\n        setLoading(false)\r\n      })\r\n  }, [params.page])\r\n\r\n  if (isLoading) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='ui container'>\r\n      <div className='ui basic segment'>\r\n        <Markdown markup={pageData} />\r\n      </div>\r\n      {\r\n        batchURI === '/index.md' ? (\r\n          <div className='ui four column stackable grid container'>\r\n            <div className='column'>\r\n              <div className='ui segment category'>\r\n                <i className='red huge icon bullhorn'/>\r\n                <h1 className='ui header'>\r\n                    공지사항\r\n                </h1>\r\n                <div className='sub header'>들어보세요. 언제나 신기한 일은 가득하답니다.</div>\r\n\r\n              </div>\r\n            </div>\r\n            <div className='column'>\r\n              <div className='ui segment category'>\r\n                <img src='./wonderbot.png' style={{ width: '57.27px' }}/>\r\n                <h1 className='ui header'>\r\n                    원더봇\r\n                </h1>\r\n                <div className='sub header'>원더봇.. 요 녀석은 뭐가 어떻게 돌아가는거죠?</div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className='ui divider' />\r\n            <div className='ui center aligned basic segment'>\r\n              <div className='ui header'>이 문서가 도움이 되셨나요?</div>\r\n              <button className='ui inverted green button'><i className='green check icon'/>예</button>\r\n              <button className='ui inverted red button'><i className='red close icon'/>아니요</button>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n      <div className='ui divider' />\r\n      <div className='ui center aligned basic segment'>\r\n        <h3 className='ui header'>현재 페이지에 잘못된 항목이 있나요?</h3>\r\n        <a className='ui small secondary button' href={editRef + batchURI} >\r\n          현재 페이지 수정하기\r\n          <i className='right arrow icon' />\r\n        </a>\r\n      </div>\r\n      <div className='ui basic segment'>\r\n        <p>\r\n          Copyright 2020 Seia-Soto. All rights reserved.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import __bodyStyle from './__bodyStyle'\r\nimport desktopOnly from './desktopOnly'\r\nimport displayHeader from './displayHeader'\r\n\r\nexport default {\r\n  __bodyStyle,\r\n  desktopOnly,\r\n  displayHeader\r\n}\r\n","import { css } from 'glamor'\r\n\r\nexport default css({\r\n  // background: '#2c2f33',\r\n  minHeight: '100vh'\r\n})\r\n","import { css } from 'glamor'\r\n\r\nexport default css({\r\n  '@media(max-width: 768px)': {\r\n    display: 'none'\r\n  }\r\n})\r\n","import { css } from 'glamor'\r\n\r\nexport default css({\r\n  background: 'black'\r\n})\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport sfe from '../sfe'\r\n\r\nconst Header = props => {\r\n  return (\r\n    <>\r\n      <div {...sfe.displayHeader}>\r\n        <div className='ui container'>\r\n          <div className='ui inverted secondary pointing menu'>\r\n            <Link to='/'>\r\n              <a className='active item'>\r\n                Callisto 서포트\r\n              </a>\r\n            </Link>\r\n\r\n            <a className='item' href='https://discord.gg/jE33mfD'>\r\n              <i className='discord icon' />\r\n              <span {...sfe.desktopOnly}>디스코드</span>\r\n            </a>\r\n\r\n            <div className='right menu'>\r\n              <Link to='/categories'>\r\n                <a className='item'>\r\n                  <i className='bars icon' />\r\n                  <span {...sfe.desktopOnly}>카테고리</span>\r\n                </a>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport Content from './components/Content'\r\nimport Header from './components/Header'\r\n\r\nimport sfe from './sfe'\r\n\r\nconst App = props => {\r\n  return (\r\n    <div {...sfe.__bodyStyle}>\r\n      <Router>\r\n        <Header />\r\n\r\n        <Switch>\r\n          <Route path='/:page+'>\r\n            <Content />\r\n          </Route>\r\n          <Route path='/'>\r\n            <Content />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport App from './App'\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}